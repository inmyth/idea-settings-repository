package mobileyed.hanatoya.jp.repo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mobileyed.hanatoya.jp.models.Cam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAM".
*/
public class CamDao extends AbstractDao<Cam, Long> {

    public static final String TABLENAME = "CAM";

    /**
     * Properties of entity Cam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Host = new Property(3, String.class, "host", false, "HOST");
        public final static Property Protocol = new Property(4, String.class, "protocol", false, "PROTOCOL");
        public final static Property Port = new Property(5, int.class, "port", false, "PORT");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(7, String.class, "password", false, "PASSWORD");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property Snap = new Property(9, byte[].class, "snap", false, "SNAP");
    };


    public CamDao(DaoConfig config) {
        super(config);
    }
    
    public CamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"HOST\" TEXT NOT NULL ," + // 3: host
                "\"PROTOCOL\" TEXT NOT NULL ," + // 4: protocol
                "\"PORT\" INTEGER NOT NULL ," + // 5: port
                "\"USERNAME\" TEXT," + // 6: username
                "\"PASSWORD\" TEXT," + // 7: password
                "\"STATUS\" INTEGER," + // 8: status
                "\"SNAP\" BLOB);"); // 9: snap
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getHost());
        stmt.bindString(5, entity.getProtocol());
        stmt.bindLong(6, entity.getPort());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(8, password);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        byte[] snap = entity.getSnap();
        if (snap != null) {
            stmt.bindBlob(10, snap);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cam readEntity(Cursor cursor, int offset) {
        Cam entity = new Cam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // host
            cursor.getString(offset + 4), // protocol
            cursor.getInt(offset + 5), // port
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // username
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // password
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9) // snap
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setHost(cursor.getString(offset + 3));
        entity.setProtocol(cursor.getString(offset + 4));
        entity.setPort(cursor.getInt(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSnap(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
